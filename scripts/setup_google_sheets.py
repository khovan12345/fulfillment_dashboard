#!/usr/bin/env python3
"""
Google Sheets Setup Script
Kh·ªüi t·∫°o Google Sheets cho h·ªá th·ªëng Fulfillment Dashboard
"""

import json
import os
import sys
from datetime import datetime
from pathlib import Path

# Th√™m th∆∞ m·ª•c g·ªëc v√†o Python path
sys.path.append(str(Path(__file__).parent.parent))

try:
    import gspread
    from google.oauth2.service_account import Credentials
    import pandas as pd
except ImportError:
    print("‚ùå Thi·∫øu th∆∞ vi·ªán c·∫ßn thi·∫øt!")
    print("C√†i ƒë·∫∑t: pip install gspread google-auth pandas openpyxl")
    sys.exit(1)

class GoogleSheetsSetup:
    def __init__(self):
        self.config_path = Path("config/system_config.json")
        self.credentials_path = Path("config/service_account.json")
        self.config = self.load_config()
        self.client = None
        self.spreadsheet = None
        
    def load_config(self):
        """T·∫£i c·∫•u h√¨nh h·ªá th·ªëng"""
        try:
            with open(self.config_path, 'r', encoding='utf-8') as f:
                return json.load(f)
        except FileNotFoundError:
            print(f"‚ùå Kh√¥ng t√¨m th·∫•y file c·∫•u h√¨nh: {self.config_path}")
            sys.exit(1)
        except json.JSONDecodeError as e:
            print(f"‚ùå L·ªói ƒë·ªçc file JSON: {e}")
            sys.exit(1)
    
    def setup_credentials(self):
        """Thi·∫øt l·∫≠p x√°c th·ª±c Google API"""
        if not self.credentials_path.exists():
            print(f"‚ùå Kh√¥ng t√¨m th·∫•y file credentials: {self.credentials_path}")
            print("üí° H∆∞·ªõng d·∫´n t·∫°o service account:")
            print("1. Truy c·∫≠p: https://console.cloud.google.com/")
            print("2. T·∫°o project m·ªõi ho·∫∑c ch·ªçn project c√≥ s·∫µn")
            print("3. B·∫≠t Google Sheets API v√† Google Drive API")
            print("4. T·∫°o Service Account v√† t·∫£i file JSON")
            print("5. ƒê·∫∑t file JSON v√†o config/service_account.json")
            return False
        
        try:
            scope = [
                'https://www.googleapis.com/auth/spreadsheets',
                'https://www.googleapis.com/auth/drive'
            ]
            
            creds = Credentials.from_service_account_file(
                self.credentials_path, scopes=scope
            )
            self.client = gspread.authorize(creds)
            print("‚úÖ K·∫øt n·ªëi Google API th√†nh c√¥ng")
            return True
            
        except Exception as e:
            print(f"‚ùå L·ªói k·∫øt n·ªëi Google API: {e}")
            return False
    
    def create_or_open_spreadsheet(self):
        """T·∫°o ho·∫∑c m·ªü spreadsheet"""
        spreadsheet_id = self.config.get("google_sheets", {}).get("spreadsheet_id")
        
        if spreadsheet_id:
            try:
                self.spreadsheet = self.client.open_by_key(spreadsheet_id)
                print(f"‚úÖ ƒê√£ m·ªü spreadsheet: {self.spreadsheet.title}")
                return True
            except Exception as e:
                print(f"‚ö†Ô∏è  Kh√¥ng th·ªÉ m·ªü spreadsheet: {e}")
                print("S·∫Ω t·∫°o spreadsheet m·ªõi...")
        
        # T·∫°o spreadsheet m·ªõi
        try:
            self.spreadsheet = self.client.create("Fulfillment Dashboard - H·ªá th·ªëng ONE")
            print(f"‚úÖ ƒê√£ t·∫°o spreadsheet m·ªõi: {self.spreadsheet.title}")
            print(f"üìã ID: {self.spreadsheet.id}")
            print(f"üîó URL: https://docs.google.com/spreadsheets/d/{self.spreadsheet.id}")
            
            # C·∫≠p nh·∫≠t config v·ªõi ID m·ªõi
            self.update_config_with_spreadsheet_id(self.spreadsheet.id)
            return True
            
        except Exception as e:
            print(f"‚ùå L·ªói t·∫°o spreadsheet: {e}")
            return False
    
    def update_config_with_spreadsheet_id(self, spreadsheet_id):
        """C·∫≠p nh·∫≠t config v·ªõi spreadsheet ID m·ªõi"""
        self.config["google_sheets"]["spreadsheet_id"] = spreadsheet_id
        
        with open(self.config_path, 'w', encoding='utf-8') as f:
            json.dump(self.config, f, indent=2, ensure_ascii=False)
        
        print(f"‚úÖ ƒê√£ c·∫≠p nh·∫≠t config v·ªõi Spreadsheet ID: {spreadsheet_id}")
    
    def setup_config_worksheet(self):
        """T·∫°o worksheet c·∫•u h√¨nh h·ªá th·ªëng"""
        try:
            # T·∫°o ho·∫∑c l·∫•y worksheet
            try:
                worksheet = self.spreadsheet.worksheet("C·∫•u h√¨nh h·ªá th·ªëng")
                worksheet.clear()
            except:
                worksheet = self.spreadsheet.add_worksheet(
                    title="C·∫•u h√¨nh h·ªá th·ªëng", 
                    rows=100, 
                    cols=20
                )
            
            # Header
            headers = [
                ["üèóÔ∏è DASHBOARD FULFILLMENT - C·∫§U H√åNH H·ªÜ TH·ªêNG", "", ""],
                ["üìÖ C·∫≠p nh·∫≠t l·∫ßn cu·ªëi:", datetime.now().strftime("%d/%m/%Y %H:%M:%S"), ""],
                ["", "", ""],
                ["PH·∫¶N", "C√ÄI ƒê·∫∂T", "GI√Å TR·ªä", "M√î T·∫¢"]
            ]
            
            # C·∫•u h√¨nh h·ªá th·ªëng
            system_config = [
                ["üåê H·ªÜ TH·ªêNG", "URL ch√≠nh", self.config["system"]["one_url"], "ƒê·ªãa ch·ªâ h·ªá th·ªëng ONE"],
                ["", "URL ƒë∆°n h√†ng", self.config["system"]["orders_url"], "ƒê∆∞·ªùng d·∫´n trang ƒë∆°n h√†ng"],
                ["", "Th·ªùi gian ch·ªù ƒëƒÉng nh·∫≠p", f"{self.config['system']['login_timeout']} gi√¢y", "Th·ªùi gian ch·ªù t·ªëi ƒëa ƒë·ªÉ ƒëƒÉng nh·∫≠p"],
                ["", "Th·ªùi gian t·∫£i trang", f"{self.config['system']['page_load_timeout']} gi√¢y", "Th·ªùi gian ch·ªù t·ªëi ƒëa ƒë·ªÉ t·∫£i trang"],
                ["", "T·ªëi ∆∞u JavaScript", "‚úÖ B·∫≠t" if self.config["system"]["use_javascript_optimization"] else "‚ùå T·∫Øt", "S·ª≠ d·ª•ng t·ªëi ∆∞u h√≥a JavaScript"],
                ["", "Th·ªùi gian phi√™n", f"{self.config['system']['session_timeout']} gi√¢y", "Th·ªùi gian phi√™n l√†m vi·ªác"],
                ["", "", ""],
                
                ["üìä X·ª¨ L√ù D·ªÆ LI·ªÜU", "S·ªë d√≤ng test t·ªëi ƒëa", str(self.config["data_processing"]["max_rows_for_testing"]), "Gi·ªõi h·∫°n d·ªØ li·ªáu khi test"],
                ["", "Ch·∫ø ƒë·ªô nhanh", "‚úÖ B·∫≠t" if self.config["data_processing"]["enable_fast_mode"] else "‚ùå T·∫Øt", "X·ª≠ l√Ω d·ªØ li·ªáu nhanh"],
                ["", "ƒê·ªãnh d·∫°ng xu·∫•t", ", ".join(self.config["data_processing"]["export_formats"]), "C√°c ƒë·ªãnh d·∫°ng file xu·∫•t"],
                ["", "", ""],
                
                ["üìß TH√îNG B√ÅO EMAIL", "Tr·∫°ng th√°i", "‚úÖ B·∫≠t" if self.config["notifications"]["email"]["enabled"] else "‚ùå T·∫Øt", "G·ª≠i th√¥ng b√°o qua email"],
                ["", "SMTP Server", self.config["notifications"]["email"]["smtp_server"], "M√°y ch·ªß g·ª≠i email"],
                ["", "SMTP Port", str(self.config["notifications"]["email"]["smtp_port"]), "C·ªïng SMTP"],
                ["", "Ng∆∞·ªùi nh·∫≠n", ", ".join(self.config["notifications"]["email"]["recipients"]), "Danh s√°ch email nh·∫≠n th√¥ng b√°o"],
                ["", "", ""],
                
                ["üí¨ TH√îNG B√ÅO SLACK", "Tr·∫°ng th√°i", "‚úÖ B·∫≠t" if self.config["notifications"]["slack"]["enabled"] else "‚ùå T·∫Øt", "G·ª≠i th√¥ng b√°o qua Slack"],
                ["", "", ""],
                
                ["‚è∞ T·ª∞ ƒê·ªòNG H√ìA", "Tr·∫°ng th√°i", "‚úÖ B·∫≠t" if self.config["scheduling"]["enabled"] else "‚ùå T·∫Øt", "Ch·∫°y t·ª± ƒë·ªông theo l·ªãch"],
                ["", "Chu k·ª≥", f"{self.config['scheduling']['interval_hours']} gi·ªù", "Kho·∫£ng th·ªùi gian gi·ªØa c√°c l·∫ßn ch·∫°y"],
                ["", "", ""],
                
                ["üìä GOOGLE SHEETS", "Tr·∫°ng th√°i", "‚úÖ B·∫≠t" if self.config["google_sheets"]["enabled"] else "‚ùå T·∫Øt", "ƒê·ªìng b·ªô v·ªõi Google Sheets"],
                ["", "Spreadsheet ID", self.config["google_sheets"]["spreadsheet_id"], "ID c·ªßa b·∫£ng t√≠nh Google"],
                ["", "T·ª± ƒë·ªông ƒë·ªìng b·ªô", "‚úÖ B·∫≠t" if self.config["google_sheets"]["auto_sync"] else "‚ùå T·∫Øt", "T·ª± ƒë·ªông c·∫≠p nh·∫≠t d·ªØ li·ªáu"],
            ]
            
            # Ghi d·ªØ li·ªáu
            all_data = headers + system_config
            
            # Ghi t·ª´ng d√≤ng ƒë·ªÉ tr√°nh l·ªói
            for i, row in enumerate(all_data, 1):
                worksheet.update(f'A{i}:D{i}', [row])
            
            # Format
            self.format_config_worksheet(worksheet)
            
            print("‚úÖ ƒê√£ t·∫°o worksheet 'C·∫•u h√¨nh h·ªá th·ªëng'")
            return True
            
        except Exception as e:
            print(f"‚ùå L·ªói t·∫°o worksheet c·∫•u h√¨nh: {e}")
            return False
    
    def setup_sla_rules_worksheet(self):
        """T·∫°o worksheet quy t·∫Øc SLA"""
        try:
            try:
                worksheet = self.spreadsheet.worksheet("Quy t·∫Øc SLA")
                worksheet.clear()
            except:
                worksheet = self.spreadsheet.add_worksheet(
                    title="Quy t·∫Øc SLA", 
                    rows=100, 
                    cols=15
                )
            
            # Header v√† d·ªØ li·ªáu SLA
            headers = [
                ["üìã QUY T·∫ÆC SLA - TH·ªúI GIAN X·ª¨ L√ù ƒê·ªöN H√ÄNG", "", "", "", "", ""],
                ["üìÖ C·∫≠p nh·∫≠t:", datetime.now().strftime("%d/%m/%Y %H:%M:%S"), "", "", "", ""],
                ["", "", "", "", "", ""],
                ["LO·∫†I ƒê∆†N H√ÄNG", "TH·ªúI GIAN X√ÅC NH·∫¨N", "TH·ªúI GIAN GIAO H√ÄNG", "M·ª®C ƒê·ªò ∆ØU TI√äN", "GHI CH√ö", "TR·∫†NG TH√ÅI", "NG∆Ø·ªúI PH·ª§ TR√ÅCH"]
            ]
            
            sla_data = [
                ["ƒê∆°n th∆∞·ªùng", "2 gi·ªù", "24 gi·ªù", "B√¨nh th∆∞·ªùng", "ƒê∆°n h√†ng th√¥ng th∆∞·ªùng", "‚úÖ Ho·∫°t ƒë·ªông", "Team CS"],
                ["ƒê∆°n g·∫•p", "30 ph√∫t", "4 gi·ªù", "Cao", "ƒê∆°n h√†ng ∆∞u ti√™n cao", "‚úÖ Ho·∫°t ƒë·ªông", "Supervisor"],
                ["ƒê∆°n VIP", "15 ph√∫t", "2 gi·ªù", "R·∫•t cao", "Kh√°ch h√†ng VIP", "‚úÖ Ho·∫°t ƒë·ªông", "Manager"],
                ["ƒê∆°n COD", "1 gi·ªù", "12 gi·ªù", "B√¨nh th∆∞·ªùng", "Thanh to√°n khi nh·∫≠n h√†ng", "‚úÖ Ho·∫°t ƒë·ªông", "Team CS"],
                ["ƒê∆°n xu·∫•t kh·∫©u", "4 gi·ªù", "72 gi·ªù", "B√¨nh th∆∞·ªùng", "Giao h√†ng qu·ªëc t·∫ø", "‚úÖ Ho·∫°t ƒë·ªông", "Team Logistics"],
                ["", "", "", "", "", ""],
                ["üìä NG∆Ø·ª†NG KPI", "", "", "", "", ""],
                ["T·ª∑ l·ªá x√°c nh·∫≠n ƒë√∫ng h·∫°n", "‚â• 90%", "B·∫Øt bu·ªôc", "M·ª•c ti√™u t·ªëi thi·ªÉu", "", ""],
                ["T·ª∑ l·ªá giao h√†ng ƒë√∫ng h·∫°n", "‚â• 85%", "B·∫Øt bu·ªôc", "M·ª•c ti√™u t·ªëi thi·ªÉu", "", ""],
                ["T·ª∑ l·ªá h·ªßy ƒë∆°n t·ªëi ƒëa", "‚â§ 10%", "Gi·ªõi h·∫°n", "Kh√¥ng ƒë∆∞·ª£c v∆∞·ª£t qu√°", "", ""],
                ["Th·ªùi gian ch·ªù t·ªëi ƒëa", "‚â§ 12 gi·ªù", "C·∫£nh b√°o", "C·∫ßn x·ª≠ l√Ω ngay", "", ""],
            ]
            
            all_data = headers + sla_data
            
            # Ghi d·ªØ li·ªáu
            for i, row in enumerate(all_data, 1):
                worksheet.update(f'A{i}:G{i}', [row])
            
            # Format
            self.format_sla_worksheet(worksheet)
            
            print("‚úÖ ƒê√£ t·∫°o worksheet 'Quy t·∫Øc SLA'")
            return True
            
        except Exception as e:
            print(f"‚ùå L·ªói t·∫°o worksheet SLA: {e}")
            return False
    
    def setup_automation_logs_worksheet(self):
        """T·∫°o worksheet log t·ª± ƒë·ªông h√≥a"""
        try:
            try:
                worksheet = self.spreadsheet.worksheet("Nh·∫≠t k√Ω t·ª± ƒë·ªông")
                worksheet.clear()
            except:
                worksheet = self.spreadsheet.add_worksheet(
                    title="Nh·∫≠t k√Ω t·ª± ƒë·ªông", 
                    rows=1000, 
                    cols=12
                )
            
            # Header
            headers = [
                ["üìù NH·∫¨T K√ù H·ªÜ TH·ªêNG T·ª∞ ƒê·ªòNG", "", "", "", "", "", "", "", "", ""],
                ["üìÖ T·∫°o:", datetime.now().strftime("%d/%m/%Y %H:%M:%S"), "", "", "", "", "", "", "", ""],
                ["", "", "", "", "", "", "", "", "", ""],
                ["TH·ªúI GIAN", "HO·∫†T ƒê·ªòNG", "TR·∫†NG TH√ÅI", "S·ªê ƒê∆†N X·ª¨ L√ù", "TH√ÄNH C√îNG", "L·ªñI", "TH·ªúI GIAN X·ª¨ L√ù", "NG∆Ø·ªúI D√ôNG", "GHI CH√ö", "CHI TI·∫æT", "ID PHI√äN"]
            ]
            
            # D·ªØ li·ªáu m·∫´u
            sample_data = [
                [
                    datetime.now().strftime("%d/%m/%Y %H:%M:%S"),
                    "Kh·ªüi t·∫°o h·ªá th·ªëng",
                    "‚úÖ Th√†nh c√¥ng",
                    "0",
                    "1",
                    "0",
                    "< 1s",
                    "System",
                    "Thi·∫øt l·∫≠p Google Sheets",
                    "T·∫°o c√°c worksheet c·∫ßn thi·∫øt",
                    "SETUP_001"
                ],
                ["", "", "", "", "", "", "", "", "", ""],
                ["üìã H∆Ø·ªöNG D·∫™N S·ª¨ D·ª§NG:", "", "", "", "", "", "", "", "", ""],
                ["- H·ªá th·ªëng s·∫Ω t·ª± ƒë·ªông ghi log v√†o ƒë√¢y", "", "", "", "", "", "", "", "", ""],
                ["- M·ªói h√†nh ƒë·ªông s·∫Ω c√≥ ID phi√™n ri√™ng", "", "", "", "", "", "", "", "", ""],
                ["- Ki·ªÉm tra c·ªôt TR·∫†NG TH√ÅI ƒë·ªÉ bi·∫øt k·∫øt qu·∫£", "", "", "", "", "", "", "", "", ""],
                ["- Xem c·ªôt CHI TI·∫æT khi c√≥ l·ªói", "", "", "", "", "", "", "", "", "", ""],
            ]
            
            all_data = headers + sample_data
            
            # Ghi d·ªØ li·ªáu
            for i, row in enumerate(all_data, 1):
                worksheet.update(f'A{i}:K{i}', [row])
            
            # Format
            self.format_logs_worksheet(worksheet)
            
            print("‚úÖ ƒê√£ t·∫°o worksheet 'Nh·∫≠t k√Ω t·ª± ƒë·ªông'")
            return True
            
        except Exception as e:
            print(f"‚ùå L·ªói t·∫°o worksheet logs: {e}")
            return False
    
    def format_config_worksheet(self, worksheet):
        """Format worksheet c·∫•u h√¨nh"""
        try:
            # Header ch√≠nh
            worksheet.format('A1:D1', {
                'backgroundColor': {'red': 0.2, 'green': 0.6, 'blue': 1.0},
                'textFormat': {'bold': True, 'foregroundColor': {'red': 1, 'green': 1, 'blue': 1}},
                'horizontalAlignment': 'CENTER'
            })
            
            # Header c·ªôt
            worksheet.format('A4:D4', {
                'backgroundColor': {'red': 0.9, 'green': 0.9, 'blue': 0.9},
                'textFormat': {'bold': True},
                'horizontalAlignment': 'CENTER'
            })
            
            # C·ªôt ph·∫ßn
            worksheet.format('A:A', {
                'textFormat': {'bold': True},
                'backgroundColor': {'red': 0.95, 'green': 0.95, 'blue': 0.95}
            })
            
        except Exception as e:
            print(f"‚ö†Ô∏è  Kh√¥ng th·ªÉ format worksheet: {e}")
    
    def format_sla_worksheet(self, worksheet):
        """Format worksheet SLA"""
        try:
            # Header ch√≠nh
            worksheet.format('A1:G1', {
                'backgroundColor': {'red': 1.0, 'green': 0.6, 'blue': 0.2},
                'textFormat': {'bold': True, 'foregroundColor': {'red': 1, 'green': 1, 'blue': 1}},
                'horizontalAlignment': 'CENTER'
            })
            
            # Header c·ªôt
            worksheet.format('A4:G4', {
                'backgroundColor': {'red': 0.9, 'green': 0.9, 'blue': 0.9},
                'textFormat': {'bold': True},
                'horizontalAlignment': 'CENTER'
            })
            
        except Exception as e:
            print(f"‚ö†Ô∏è  Kh√¥ng th·ªÉ format worksheet: {e}")
    
    def format_logs_worksheet(self, worksheet):
        """Format worksheet logs"""
        try:
            # Header ch√≠nh
            worksheet.format('A1:K1', {
                'backgroundColor': {'red': 0.6, 'green': 0.8, 'blue': 0.6},
                'textFormat': {'bold': True, 'foregroundColor': {'red': 1, 'green': 1, 'blue': 1}},
                'horizontalAlignment': 'CENTER'
            })
            
            # Header c·ªôt
            worksheet.format('A4:K4', {
                'backgroundColor': {'red': 0.9, 'green': 0.9, 'blue': 0.9},
                'textFormat': {'bold': True},
                'horizontalAlignment': 'CENTER'
            })
            
        except Exception as e:
            print(f"‚ö†Ô∏è  Kh√¥ng th·ªÉ format worksheet: {e}")
    
    def setup_permissions(self):
        """Thi·∫øt l·∫≠p quy·ªÅn truy c·∫≠p"""
        try:
            # Chia s·∫ª v·ªõi email trong config (n·∫øu c√≥)
            email_recipients = self.config.get("notifications", {}).get("email", {}).get("recipients", [])
            
            for email in email_recipients:
                if email != "admin@example.com":  # B·ªè qua email m·∫´u
                    try:
                        self.spreadsheet.share(email, perm_type='user', role='writer')
                        print(f"‚úÖ ƒê√£ chia s·∫ª v·ªõi: {email}")
                    except Exception as e:
                        print(f"‚ö†Ô∏è  Kh√¥ng th·ªÉ chia s·∫ª v·ªõi {email}: {e}")
            
            print("ÔøΩÔøΩ L∆∞u √Ω: H√£y chia s·∫ª spreadsheet v·ªõi nh√¢n vi√™n c·∫ßn thi·∫øt")
            
        except Exception as e:
            print(f"‚ö†Ô∏è  L·ªói thi·∫øt l·∫≠p quy·ªÅn: {e}")
    
    def run(self):
        """Ch·∫°y script setup"""
        print("üöÄ B·∫ÆT ƒê·∫¶U THI·∫æT L·∫¨P GOOGLE SHEETS")
        print("=" * 50)
        
        # Ki·ªÉm tra credentials
        if not self.setup_credentials():
            return False
        
        # T·∫°o/m·ªü spreadsheet
        if not self.create_or_open_spreadsheet():
            return False
        
        # T·∫°o c√°c worksheets
        success = True
        success &= self.setup_config_worksheet()
        success &= self.setup_sla_rules_worksheet()
        success &= self.setup_automation_logs_worksheet()
        
        if success:
            # Thi·∫øt l·∫≠p quy·ªÅn
            self.setup_permissions()
            
            print("=" * 50)
            print("üéâ THI·∫æT L·∫¨P HO√ÄN T·∫§T!")
            print(f"üìä Spreadsheet: {self.spreadsheet.title}")
            print(f"üîó URL: https://docs.google.com/spreadsheets/d/{self.spreadsheet.id}")
            print(f"üìã ID: {self.spreadsheet.id}")
            print("")
            print("üìù C√°c worksheet ƒë√£ t·∫°o:")
            print("  - C·∫•u h√¨nh h·ªá th·ªëng")
            print("  - Quy t·∫Øc SLA")  
            print("  - Nh·∫≠t k√Ω t·ª± ƒë·ªông")
            print("")
            print("üí° B∆∞·ªõc ti·∫øp theo:")
            print("  1. Chia s·∫ª spreadsheet v·ªõi nh√¢n vi√™n")
            print("  2. C·∫≠p nh·∫≠t quy t·∫Øc SLA theo y√™u c·∫ßu")
            print("  3. Ki·ªÉm tra c·∫•u h√¨nh h·ªá th·ªëng")
            
            return True
        else:
            print("‚ùå C√≥ l·ªói x·∫£y ra trong qu√° tr√¨nh thi·∫øt l·∫≠p")
            return False

def main():
    """H√†m ch√≠nh"""
    try:
        setup = GoogleSheetsSetup()
        setup.run()
    except KeyboardInterrupt:
        print("\n‚ö†Ô∏è  ƒê√£ h·ªßy thi·∫øt l·∫≠p")
    except Exception as e:
        print(f"‚ùå L·ªói kh√¥ng mong mu·ªën: {e}")

if __name__ == "__main__":
    main()
